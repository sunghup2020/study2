import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View } from 'react-native';
import React, { useEffect,useState } from "react";
import {
  Alert,
  TextInput,
  TouchableOpacity,
  TouchableHighlight,
  TouchableWithoutFeedback,
  Pressable,
  ScrollView,
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { AntDesign } from '@expo/vector-icons';
import BouncyCheckbox from "react-native-bouncy-checkbox";
import { Entypo } from '@expo/vector-icons'; 
import { NavigationContainer } from "@react-navigation/native";
const STORAGE_KEY = "@toDos";

export default function App({navigation}) {
  
const [todos, setTodos] = useState([]);
  const [working, setWorking] = useState(true);
  const [text, setText] = useState("");
  const [toDos, setToDos] = useState({});

  const goTocalendars = () => navigation.navigate("calendars");
  useEffect(() => {
    loadToDos();
  }, []);
  const travel = () => setWorking(false);
  const work = () => setWorking(true);
  const calendar = () => setWorking(true);
  const onChangeText = (payload) => setText(payload);
  
  const saveToDos = async (toSave) => {
    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));
  };
  const loadToDos = async () => {
    const s = await AsyncStorage.getItem(STORAGE_KEY);
    //setToDos(JSON.parse(s));
    console.log(s)
    s !== null ? setToDos(JSON.parse(s)) : null;
  };
 
  const addToDo = async () => {
    if (text === "") {
      return;
    }
   // const newToDos = Object.assign({}, toDos, {
    const newToDos = {
      ...toDos,
      [Date.now()]: { text, working },
    };
    setToDos(newToDos);
    await saveToDos(newToDos);
    setText("");
  };
  const deleteToDo = (key) => {
    Alert.alert("나의 메모 삭제", "지우시겠습니까?", [
      { text: "아니오" },
      {
        text: "예",
        style: "destructive",
        onPress: () => {
          const newToDos = { ...toDos };
          delete newToDos[key];
          setToDos(newToDos);
          saveToDos(newToDos);
        },
      },
    ]);
  };
  const onToggle = id => e => {
    setTodos(
      todos.map(todo =>
        todo.id === id ? {...todo, checked: !todo.checked} : todo,
      ),
    );
  };
  //console.log(toDos);
  
  return (
    
    <View style={styles.container}>
      <StatusBar style="auto" />
      <View style={styles.header}>
        
      <TouchableOpacity onPress={work}>
        
          <Text
            style={{ ...styles.btnText, color: working ? "white" : "grey" }}
          >
            Work
          </Text>

        </TouchableOpacity>

        <TouchableOpacity onpress={goTocalendars}>
        <Text style={{
              ...styles.btnText,
              color: !working ? "white" : "grey",
              color: !travel ? "white" : "grey",
            }}>
        calendar
        </Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={travel}>
          <Text
            style={{
              ...styles.btnText,
              color: !working ? "white" : "grey",
            }}
            
          >
            Travel
          </Text>
        </TouchableOpacity>
      </View>
      <View style={{ width: 2000, height: 0.8, borderRadius:0, marginTop: 8, backgroundColor: 'tomato' }}></View>
      <TextInput
       onSubmitEditing={addToDo}
        onChangeText={onChangeText}
        returnKeyType="done"
        value={text}
        placeholder={
          working ? "나의 할 일(17자이내로)" : "가고 싶은 여행지"
        }
        style={styles.input}
      />
         
        <ScrollView >
        {Object.keys(toDos).map((key) =>
          toDos[key].working === working ? (
            
            <View style={styles.toDo} key={key}
                
            >
                     <BouncyCheckbox
              style={styles.checkbox}
              size={28}
              fillColor="blue"
              unfillColor="#FFFFFF"
              iconStyle={{ borderColor: "blue" }}
              onPress={() => {}}
              />

              <Text style={styles.toDoText}>{toDos[key].text}</Text>
           

           
              <TouchableOpacity  onPress={() => deleteToDo(key)}>
              <AntDesign   name="delete"  size={25} color="black" />
              </TouchableOpacity>

        
              
      
            </View>
            
          ) : null
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    paddingHorizontal: 1.1,
   backgroundColor: "#282828",
   
  },
  header: {
    justifyContent: "space-between",
    flexDirection: "row",
    marginTop: 100,
  },
  btnText: {
    fontSize: 38,
    fontWeight: "600",
    color: "white",
  },
  input: {
    backgroundColor: "white",
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 30,
    marginTop: 30,
    fontSize: 18,
    marginVertical: 20,
  },
  toDo: {
    backgroundColor: "#3A3D40",
    marginBottom: 20,
    paddingVertical: 20,
    paddingHorizontal: 20,
    borderRadius: 15,
     flexDirection: "row",
    alignItems: "flex-end",
    justifyContent: "space-between",
    
  },
  toDoText: {
    color: "white",
    fontSize: 16,
    fontWeight: "500",
    
  },
  iconstyle:{
    marginRight: 20,
    color: "red",
    
  }
});

///<TouchableOpacity>
   ///           <Entypo name="edit" size={25} color="white" />
      ///        </TouchableOpacity>
        
       
